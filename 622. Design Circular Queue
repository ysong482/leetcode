class MyCircularQueue:

    def __init__(self, k: int):
        self.queue = collections.deque()
        self.cap = k
        self.size = 0
        


    def enQueue(self, value: int) -> bool:
        if(self.cap == self.size):
            return False
        self.queue.append(value)
        self.size += 1
        return True


    def deQueue(self) -> bool:
        if(self.size == 0):
            return False
        self.queue.popleft()
        self.size -=1
        return True
        


    def Front(self) -> int:
        if(len(self.queue)!= 0):
            return self.queue[0]
        else:
            return -1
        

    def Rear(self) -> int:
        if(self.size == 0):
            return -1
        return self.queue[self.size -1]


    def isEmpty(self) -> bool:
        if(self.size == 0):
            return True
        else:
            return False


    def isFull(self) -> bool:
        if(self.size == self.cap):
            return True
        else:
            return False



# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
